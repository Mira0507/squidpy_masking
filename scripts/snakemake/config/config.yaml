# Specify path to conda env
conda_env: '../../env'

# Specify path to a tab-separated sampletable, consisting of 
# the following columns:
# - samplename: unique sample identifier
# - input_vsi: path to a vsi file
sampletable: 'config/sampletable.txt'

# Output directory for converted images
out_converted: '../../images/converted'

# Output directory for masked images
out_masked: "results"

# Specify the series to be converted. 
# NOTE: 
# - Determine the series based on the input metadata. 
# - Select one for multi-channel with a desired resolution
# - If `None`, python specifies one series with the highest resolution
#   and multi-channel data
ser: None

# "Y" or "N". Set to "Y" if you want to save as pyramidal output
# See https://www.microscopesinternational.com/support/kb/article/ngn1076.aspx
pyramidal: Y


# Specify the name of default input image layer in the ImageContainer obj
# Do not change this value unless you want to set a custom name by default
lyr: 'image'

# Specify the size of chunks that is applied to height and width
chunksize: 5000

# Lower and upper percentage of intensities for image normalization
# For very clean data, you could use 0 and 100.
# For very noisy data, you might use 2 and 98, or even 5 and 95.
lower_p: 1
upper_p: 99

# Specify normalization method after reviewing QC & normalization data
# NOTE: Review the `qc_normalization.html` summary file. Leaving this option
#       empty ("") will pause after the `qc_normalization` rule.
# - "raw": unnormalized
# - "clahe": CLAHE-mediated local contrast enhancement
# - "lognorm": log1p normalization
# - "percnorm": percentile rescaling
norm_method: "raw"

# Specify signal values to be tested for Gaussian smoothing
# Sigma represents the variance for normal distribution
gaussian_sigma: 1

# Specify whether input images will be cropped
crop_images: "N"

# Specify coordinates to crop images
# This section is omitted if the `crop_images` is set to "N"
crop_height: 0.5
crop_width: 0.5
crop_size: 1000
crop_scale: 1

# Specify methods for segmentation and thresholding. The `seg_method` and 
# `thr_method` will be passed into the `squidpy.im.process` function. 
# Refer to the following documentations for more info:
# - https://squidpy.readthedocs.io/en/stable/api/squidpy.im.process.html 
# - https://squidpy.readthedocs.io/en/latest/notebooks/examples/image/compute_segment_fluo.html
# Specify the `method` argument
seg_method: "watershed"
# Specify the `thresh` argument
thr_method: None



# Set parameters for adaptive thresholding
# - block_size: neighborhood size, ~5â€“15% of the image dimension, odd integer.
# - offset: a constant added to (or subtracted from) the computed threshold (set to 0 by default)
#           higher offset results in more stringent thresholding
block_size: None
offset: -100

